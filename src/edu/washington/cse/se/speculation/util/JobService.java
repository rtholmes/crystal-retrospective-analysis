/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package edu.washington.cse.se.speculation.util;

import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.TApplicationException;
import org.apache.thrift.TBase;
import org.apache.thrift.TBaseHelper;
import org.apache.thrift.TException;
import org.apache.thrift.TFieldIdEnum;
import org.apache.thrift.TFieldRequirementType;
import org.apache.thrift.TProcessor;
import org.apache.thrift.TServiceClient;
import org.apache.thrift.TServiceClientFactory;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.async.TAsyncClient;
import org.apache.thrift.async.TAsyncClientFactory;
import org.apache.thrift.async.TAsyncClientManager;
import org.apache.thrift.async.TAsyncMethodCall;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TMessage;
import org.apache.thrift.protocol.TMessageType;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TProtocolFactory;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TType;
import org.apache.thrift.transport.TMemoryInputTransport;
import org.apache.thrift.transport.TNonblockingTransport;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JobService {

	public interface Iface {

		public String getNextJob(String hex, String clientName, String content) throws TException;

	}

	public interface AsyncIface {

		public void getNextJob(String hex, String clientName, String content, AsyncMethodCallback<AsyncClient.getNextJob_call> resultHandler) throws TException;

	}

	public static class Client implements TServiceClient, Iface {
		public static class Factory implements TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient(TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(TProtocol iprot, TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(TProtocol prot) {
			this(prot, prot);
		}

		public Client(TProtocol iprot, TProtocol oprot) {
			iprot_ = iprot;
			oprot_ = oprot;
		}

		protected TProtocol iprot_;
		protected TProtocol oprot_;

		protected int seqid_;

		public TProtocol getInputProtocol() {
			return this.iprot_;
		}

		public TProtocol getOutputProtocol() {
			return this.oprot_;
		}

		public String getNextJob(String hex, String clientName, String content) throws TException {
			send_getNextJob(hex, clientName, content);
			return recv_getNextJob();
		}

		public void send_getNextJob(String hex, String clientName, String content) throws TException {
			oprot_.writeMessageBegin(new TMessage("getNextJob", TMessageType.CALL, ++seqid_));
			getNextJob_args args = new getNextJob_args();
			args.setHex(hex);
			args.setClientName(clientName);
			args.setContent(content);
			args.write(oprot_);
			oprot_.writeMessageEnd();
			oprot_.getTransport().flush();
		}

		public String recv_getNextJob() throws TException {
			TMessage msg = iprot_.readMessageBegin();
			if (msg.type == TMessageType.EXCEPTION) {
				TApplicationException x = TApplicationException.read(iprot_);
				iprot_.readMessageEnd();
				throw x;
			}
			if (msg.seqid != seqid_) {
				throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getNextJob failed: out of sequence response");
			}
			getNextJob_result result = new getNextJob_result();
			result.read(iprot_);
			iprot_.readMessageEnd();
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new TApplicationException(TApplicationException.MISSING_RESULT, "getNextJob failed: unknown result");
		}

	}

	public static class AsyncClient extends TAsyncClient implements AsyncIface {
		public static class Factory implements TAsyncClientFactory<AsyncClient> {
			private TAsyncClientManager clientManager;
			private TProtocolFactory protocolFactory;

			public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}
		}

		public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void getNextJob(String hex, String clientName, String content, AsyncMethodCallback<getNextJob_call> resultHandler) throws TException {
			checkReady();
			getNextJob_call method_call = new getNextJob_call(hex, clientName, content, resultHandler, this, protocolFactory, transport);
			manager.call(method_call);
		}

		public static class getNextJob_call extends TAsyncMethodCall {
			private String hex;
			private String clientName;
			private String content;

			public getNextJob_call(String hex, String clientName, String content, AsyncMethodCallback<getNextJob_call> resultHandler, TAsyncClient client,
					TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.hex = hex;
				this.clientName = clientName;
				this.content = content;
			}

			public void write_args(TProtocol prot) throws TException {
				prot.writeMessageBegin(new TMessage("getNextJob", TMessageType.CALL, 0));
				getNextJob_args args = new getNextJob_args();
				args.setHex(hex);
				args.setClientName(clientName);
				args.setContent(content);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public String getResult() throws TException {
				if (getState() != State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
				TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getNextJob();
			}
		}

	}

	public static class Processor implements TProcessor {
		private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

		public Processor(Iface iface) {
			iface_ = iface;
			processMap_.put("getNextJob", new getNextJob());
		}

		protected static interface ProcessFunction {
			public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
		}

		private Iface iface_;
		protected final HashMap<String, ProcessFunction> processMap_ = new HashMap<String, ProcessFunction>();

		public boolean process(TProtocol iprot, TProtocol oprot) throws TException {
			TMessage msg = iprot.readMessageBegin();
			ProcessFunction fn = processMap_.get(msg.name);
			if (fn == null) {
				TProtocolUtil.skip(iprot, TType.STRUCT);
				iprot.readMessageEnd();
				TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '" + msg.name + "'");
				oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
				x.write(oprot);
				oprot.writeMessageEnd();
				oprot.getTransport().flush();
				return true;
			}
			fn.process(msg.seqid, iprot, oprot);
			return true;
		}

		private class getNextJob implements ProcessFunction {
			public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException {
				getNextJob_args args = new getNextJob_args();
				try {
					args.read(iprot);
				} catch (TProtocolException e) {
					iprot.readMessageEnd();
					TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
					oprot.writeMessageBegin(new TMessage("getNextJob", TMessageType.EXCEPTION, seqid));
					x.write(oprot);
					oprot.writeMessageEnd();
					oprot.getTransport().flush();
					return;
				}
				iprot.readMessageEnd();
				getNextJob_result result = new getNextJob_result();
				result.success = iface_.getNextJob(args.hex, args.clientName, args.content);
				oprot.writeMessageBegin(new TMessage("getNextJob", TMessageType.REPLY, seqid));
				result.write(oprot);
				oprot.writeMessageEnd();
				oprot.getTransport().flush();
			}

		}

	}

	public static class getNextJob_args implements TBase<getNextJob_args, getNextJob_args._Fields>, java.io.Serializable, Cloneable {
		private static final TStruct STRUCT_DESC = new TStruct("getNextJob_args");

		private static final TField HEX_FIELD_DESC = new TField("hex", TType.STRING, (short) 1);
		private static final TField CLIENT_NAME_FIELD_DESC = new TField("clientName", TType.STRING, (short) 2);
		private static final TField CONTENT_FIELD_DESC = new TField("content", TType.STRING, (short) 3);

		public String hex;
		public String clientName;
		public String content;

		/**
		 * The set of fields this struct contains, along with convenience methods for finding and
		 * manipulating them.
		 */
		public enum _Fields implements TFieldIdEnum {
			HEX((short) 1, "hex"), CLIENT_NAME((short) 2, "clientName"), CONTENT((short) 3, "content");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // HEX
					return HEX;
				case 2: // CLIENT_NAME
					return CLIENT_NAME;
				case 3: // CONTENT
					return CONTENT;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it is not
			 * found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments

		public static final Map<_Fields, FieldMetaData> metaDataMap;
		static {
			Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.HEX, new FieldMetaData("hex", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
			tmpMap.put(_Fields.CLIENT_NAME, new FieldMetaData("clientName", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
			tmpMap.put(_Fields.CONTENT, new FieldMetaData("content", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			FieldMetaData.addStructMetaDataMap(getNextJob_args.class, metaDataMap);
		}

		public getNextJob_args() {
		}

		public getNextJob_args(String hex, String clientName, String content) {
			this();
			this.hex = hex;
			this.clientName = clientName;
			this.content = content;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getNextJob_args(getNextJob_args other) {
			if (other.isSetHex()) {
				this.hex = other.hex;
			}
			if (other.isSetClientName()) {
				this.clientName = other.clientName;
			}
			if (other.isSetContent()) {
				this.content = other.content;
			}
		}

		public getNextJob_args deepCopy() {
			return new getNextJob_args(this);
		}

		@Deprecated
		public getNextJob_args clone() {
			return new getNextJob_args(this);
		}

		public String getHex() {
			return this.hex;
		}

		public getNextJob_args setHex(String hex) {
			this.hex = hex;
			return this;
		}

		public void unsetHex() {
			this.hex = null;
		}

		/** Returns true if field hex is set (has been asigned a value) and false otherwise */
		public boolean isSetHex() {
			return this.hex != null;
		}

		public void setHexIsSet(boolean value) {
			if (!value) {
				this.hex = null;
			}
		}

		public String getClientName() {
			return this.clientName;
		}

		public getNextJob_args setClientName(String clientName) {
			this.clientName = clientName;
			return this;
		}

		public void unsetClientName() {
			this.clientName = null;
		}

		/** Returns true if field clientName is set (has been asigned a value) and false otherwise */
		public boolean isSetClientName() {
			return this.clientName != null;
		}

		public void setClientNameIsSet(boolean value) {
			if (!value) {
				this.clientName = null;
			}
		}

		public String getContent() {
			return this.content;
		}

		public getNextJob_args setContent(String content) {
			this.content = content;
			return this;
		}

		public void unsetContent() {
			this.content = null;
		}

		/** Returns true if field content is set (has been asigned a value) and false otherwise */
		public boolean isSetContent() {
			return this.content != null;
		}

		public void setContentIsSet(boolean value) {
			if (!value) {
				this.content = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case HEX:
				if (value == null) {
					unsetHex();
				} else {
					setHex((String) value);
				}
				break;

			case CLIENT_NAME:
				if (value == null) {
					unsetClientName();
				} else {
					setClientName((String) value);
				}
				break;

			case CONTENT:
				if (value == null) {
					unsetContent();
				} else {
					setContent((String) value);
				}
				break;

			}
		}

		public void setFieldValue(int fieldID, Object value) {
			setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case HEX:
				return getHex();

			case CLIENT_NAME:
				return getClientName();

			case CONTENT:
				return getContent();

			}
			throw new IllegalStateException();
		}

		public Object getFieldValue(int fieldId) {
			return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been asigned a value) and
		 * false otherwise
		 */
		public boolean isSet(_Fields field) {
			switch (field) {
			case HEX:
				return isSetHex();
			case CLIENT_NAME:
				return isSetClientName();
			case CONTENT:
				return isSetContent();
			}
			throw new IllegalStateException();
		}

		public boolean isSet(int fieldID) {
			return isSet(_Fields.findByThriftIdOrThrow(fieldID));
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getNextJob_args)
				return this.equals((getNextJob_args) that);
			return false;
		}

		public boolean equals(getNextJob_args that) {
			if (that == null)
				return false;

			boolean this_present_hex = true && this.isSetHex();
			boolean that_present_hex = true && that.isSetHex();
			if (this_present_hex || that_present_hex) {
				if (!(this_present_hex && that_present_hex))
					return false;
				if (!this.hex.equals(that.hex))
					return false;
			}

			boolean this_present_clientName = true && this.isSetClientName();
			boolean that_present_clientName = true && that.isSetClientName();
			if (this_present_clientName || that_present_clientName) {
				if (!(this_present_clientName && that_present_clientName))
					return false;
				if (!this.clientName.equals(that.clientName))
					return false;
			}

			boolean this_present_content = true && this.isSetContent();
			boolean that_present_content = true && that.isSetContent();
			if (this_present_content || that_present_content) {
				if (!(this_present_content && that_present_content))
					return false;
				if (!this.content.equals(that.content))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		public int compareTo(getNextJob_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;
			getNextJob_args typedOther = (getNextJob_args) other;

			lastComparison = Boolean.valueOf(isSetHex()).compareTo(typedOther.isSetHex());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetHex()) {
				lastComparison = TBaseHelper.compareTo(this.hex, typedOther.hex);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetClientName()).compareTo(typedOther.isSetClientName());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetClientName()) {
				lastComparison = TBaseHelper.compareTo(this.clientName, typedOther.clientName);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetContent()) {
				lastComparison = TBaseHelper.compareTo(this.content, typedOther.content);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public void read(TProtocol iprot) throws TException {
			TField field;
			iprot.readStructBegin();
			while (true) {
				field = iprot.readFieldBegin();
				if (field.type == TType.STOP) {
					break;
				}
				switch (field.id) {
				case 1: // HEX
					if (field.type == TType.STRING) {
						this.hex = iprot.readString();
					} else {
						TProtocolUtil.skip(iprot, field.type);
					}
					break;
				case 2: // CLIENT_NAME
					if (field.type == TType.STRING) {
						this.clientName = iprot.readString();
					} else {
						TProtocolUtil.skip(iprot, field.type);
					}
					break;
				case 3: // CONTENT
					if (field.type == TType.STRING) {
						this.content = iprot.readString();
					} else {
						TProtocolUtil.skip(iprot, field.type);
					}
					break;
				default:
					TProtocolUtil.skip(iprot, field.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the validate
			// method
			validate();
		}

		public void write(TProtocol oprot) throws TException {
			validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (this.hex != null) {
				oprot.writeFieldBegin(HEX_FIELD_DESC);
				oprot.writeString(this.hex);
				oprot.writeFieldEnd();
			}
			if (this.clientName != null) {
				oprot.writeFieldBegin(CLIENT_NAME_FIELD_DESC);
				oprot.writeString(this.clientName);
				oprot.writeFieldEnd();
			}
			if (this.content != null) {
				oprot.writeFieldBegin(CONTENT_FIELD_DESC);
				oprot.writeString(this.content);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getNextJob_args(");
			boolean first = true;

			sb.append("hex:");
			if (this.hex == null) {
				sb.append("null");
			} else {
				sb.append(this.hex);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("clientName:");
			if (this.clientName == null) {
				sb.append("null");
			} else {
				sb.append(this.clientName);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("content:");
			if (this.content == null) {
				sb.append("null");
			} else {
				sb.append(this.content);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws TException {
			// check for required fields
		}

	}

	public static class getNextJob_result implements TBase<getNextJob_result, getNextJob_result._Fields>, java.io.Serializable, Cloneable {
		private static final TStruct STRUCT_DESC = new TStruct("getNextJob_result");

		private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short) 0);

		public String success;

		/**
		 * The set of fields this struct contains, along with convenience methods for finding and
		 * manipulating them.
		 */
		public enum _Fields implements TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it is not
			 * found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments

		public static final Map<_Fields, FieldMetaData> metaDataMap;
		static {
			Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			FieldMetaData.addStructMetaDataMap(getNextJob_result.class, metaDataMap);
		}

		public getNextJob_result() {
		}

		public getNextJob_result(String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getNextJob_result(getNextJob_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public getNextJob_result deepCopy() {
			return new getNextJob_result(this);
		}

		@Deprecated
		public getNextJob_result clone() {
			return new getNextJob_result(this);
		}

		public String getSuccess() {
			return this.success;
		}

		public getNextJob_result setSuccess(String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/** Returns true if field success is set (has been asigned a value) and false otherwise */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((String) value);
				}
				break;

			}
		}

		public void setFieldValue(int fieldID, Object value) {
			setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		public Object getFieldValue(int fieldId) {
			return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been asigned a value) and
		 * false otherwise
		 */
		public boolean isSet(_Fields field) {
			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		public boolean isSet(int fieldID) {
			return isSet(_Fields.findByThriftIdOrThrow(fieldID));
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getNextJob_result)
				return this.equals((getNextJob_result) that);
			return false;
		}

		public boolean equals(getNextJob_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		public int compareTo(getNextJob_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;
			getNextJob_result typedOther = (getNextJob_result) other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public void read(TProtocol iprot) throws TException {
			TField field;
			iprot.readStructBegin();
			while (true) {
				field = iprot.readFieldBegin();
				if (field.type == TType.STOP) {
					break;
				}
				switch (field.id) {
				case 0: // SUCCESS
					if (field.type == TType.STRING) {
						this.success = iprot.readString();
					} else {
						TProtocolUtil.skip(iprot, field.type);
					}
					break;
				default:
					TProtocolUtil.skip(iprot, field.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the validate
			// method
			validate();
		}

		public void write(TProtocol oprot) throws TException {
			oprot.writeStructBegin(STRUCT_DESC);

			if (this.isSetSuccess()) {
				oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
				oprot.writeString(this.success);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getNextJob_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws TException {
			// check for required fields
		}

	}

}
